}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*rgbMax[1]
green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*rgbMax[1]
green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
blue[i] <- normalizedSentiment
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*rgbMax[1]
green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
blue[i] <- normalizedSentiment
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
blue[i] <- normalizedSentiment
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
blue[i] <- normalizedSentiment
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*rgbMax[1]
green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
blue[i] <- normalizedSentiment
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
green[i] <- normalizedSentiment
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*rgbMax[1]
green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
green[i] <- normalizedSentiment
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
green[i] <- normalizedSentiment
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*rgbMax[1]
#green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
green[i] <- normalizedSentiment
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
#green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
meanSentiment
hourlyStats$meanSentiment
sentimentScore[2]
sentimentScores[2]
1.3333-2
1.33 > 2
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
green[i] <- normalizedSentiment
rgbMax <- col2rgb(maxColor)
red[i] <- tempSentiment
#red[i] = normalizedSentiment*rgbMax[1]
#green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
green[i] <- normalizedSentiment
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
#green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
green[i] <- normalizedSentiment
rgbMax <- col2rgb(maxColor)
red[i] <- tempSentiment
#red[i] = normalizedSentiment*rgbMax[1]
#green[i] = normalizedSentiment*rgbMax[2]
#blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
green[i] <- normalizedSentiment
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
red[i] <- tempSentiment
#green[i] = normalizedSentiment*rgbMin[2]
#blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
green[i] <- normalizedSentiment
rgbMax <- col2rgb(maxColor)
red[i] <- tempSentiment
#red[i] = normalizedSentiment*rgbMax[1]
#green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
green[i] <- normalizedSentiment
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
red[i] <- tempSentiment
#green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
? rgb
hourlyStats <- calcHourlyStats(rawData,hourIndices,keywordIndicator)
positiveColor <- rgb(0,0,1)
negativeColor <- rgb(1,0,0)
sentimentScores <- c(4,2,0) # 4 is positive, 2 is neutral, 0 is negative
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*rgbMax[1]
green[i] = normalizedSentiment*rgbMax[2]
blue[i] = normalizedSentiment*rgbMax[3]
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*rgbMin[1]
green[i] = normalizedSentiment*rgbMin[2]
blue[i] = normalizedSentiment*rgbMin[3]
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
hourlyStats <- calcHourlyStats(rawData,hourIndices,keywordIndicator)
positiveColor <- rgb(0,0,1)
negativeColor <- rgb(1,0,0)
sentimentScores <- c(4,2,0) # 4 is positive, 2 is neutral, 0 is negative
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
x <- 1
y <- 2
plot(x,y,col=rgb(1,0,0))
plot(x,y,col=rgb(1,1,1))
plot(x,y,col=rgb(0,0,0))
col2rgb("red")
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*(255-rgbMax[1])/255
green[i] = normalizedSentiment*(255-rgbMax[2])/255
blue[i] = normalizedSentiment*(255-rgbMax[3])/255
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*(255-rgbMin[1])/255
green[i] = normalizedSentiment*(255-rgbMin[2])/255
blue[i] = normalizedSentiment*(255-rgbMin[3])/
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
rgbMax <- col2rgb(maxColor)
red[i] = normalizedSentiment*(255-rgbMax[1])/255
green[i] = normalizedSentiment*(255-rgbMax[2])/255
blue[i] = normalizedSentiment*(255-rgbMax[3])/255
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
rgbMin <- col2rgb(minColor)
red[i] = normalizedSentiment*(255-rgbMin[1])/255
green[i] = normalizedSentiment*(255-rgbMin[2])/255
blue[i] = normalizedSentiment*(255-rgbMin[3])/255
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
hourlyStats <- calcHourlyStats(rawData,hourIndices,keywordIndicator)
positiveColor <- rgb(0,0,1)
negativeColor <- rgb(1,0,0)
sentimentScores <- c(4,2,0) # 4 is positive, 2 is neutral, 0 is negative
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
# calculate color for mean sentiment value
calcColorGradient <- function(meanSentiment,minColor,maxColor,sentimentRange)
{
red <- rep(0,length(meanSentiment))
green <- rep(0,length(meanSentiment))
blue <- rep(0,length(meanSentiment))
normalizedSentiment <- 0
for(i in 1:length(meanSentiment))
{
tempSentiment <- meanSentiment[i]
if(tempSentiment > sentimentRange[2] )
{
normalizedSentiment <- (tempSentiment - sentimentRange[2])/(sentimentRange[1] - sentimentRange[2])
rgbMax <- col2rgb(maxColor)
red[i] = (1-normalizedSentiment) + normalizedSentiment*(rgbMax[1])/(255*2)
green[i] = (1-normalizedSentiment) + normalizedSentiment*(rgbMax[2])/255
blue[i] = (1-normalizedSentiment) + normalizedSentiment*(rgbMax[3])/255
}
else {
normalizedSentiment <- (tempSentiment - sentimentRange[3])/(sentimentRange[2] - sentimentRange[3])
rgbMin <- col2rgb(minColor)
red[i] = (1-normalizedSentiment) + normalizedSentiment*(rgbMin[1])/255
green[i] = (1-normalizedSentiment) + normalizedSentiment*(rgbMin[2])/255
blue[i] = (1-normalizedSentiment) + normalizedSentiment*(rgbMin[3])/255
}
}
colorData <- data.frame(red,green,blue)
return(colorData)
}
hourlyStats <- calcHourlyStats(rawData,hourIndices,keywordIndicator)
positiveColor <- rgb(0,0,1)
negativeColor <- rgb(1,0,0)
sentimentScores <- c(4,2,0) # 4 is positive, 2 is neutral, 0 is negative
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
colorGradient
hourlyStats$meanEnvScore
hourlyStats$meanSentiment
block2Data <- data.frame(hourlyStats,colorGradients)
block2Data <- data.frame(hourlyStats,colorGradient)
block2Data
write.csv(block3Data, "block3ExpectedResults.csv")
block3Data <- data.frame(hourlyStats,colorGradient)
write.csv(block3Data, "block3ExpectedResults.csv")
write.csv(hourIndices,"block2ExpectedResults_HourIndices.csv")
write.csv(keywordDataframe, "block2ExpectedResults_keywordIndicator.csv")
############ derive expected output for block 2 operations #############
hourIndices <- calcExpectedHourlyTweetIndices(rawData)
keywordIndicator <- calcExpectedKeywordIndices(rawData,c("snow", "park","I'm"))
keywordDataframe <- data.frame(Snow = keywordIndicator[,1], Park = keywordIndicator[,2], Im = keywordIndicator[,3])
write.csv(hourIndices,"block2ExpectedResults_HourIndices.csv")
write.csv(keywordDataframe, "block2ExpectedResults_keywordIndicator.csv")
########### derive expected output for block 3 operations ############
hourlyStats <- calcHourlyStats(rawData,hourIndices,keywordIndicator)
positiveColor <- rgb(0,0,1)
negativeColor <- rgb(1,0,0)
sentimentScores <- c(4,2,0) # 4 is positive, 2 is neutral, 0 is negative
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
block3Data <- data.frame(hourlyStats,colorGradient)
write.csv(block3Data, "block3ExpectedResults.csv")
rawData <- read.csv("TestData_OpenCL_SMA.csv")
############ derive expected output for block 2 operations #############
hourIndices <- calcExpectedHourlyTweetIndices(rawData)
keywordIndicator <- calcExpectedKeywordIndices(rawData,c("snow", "park","I'm"))
keywordDataframe <- data.frame(Snow = keywordIndicator[,1], Park = keywordIndicator[,2], Im = keywordIndicator[,3])
write.csv(hourIndices,"block2ExpectedResults_HourIndices.csv")
write.csv(keywordDataframe, "block2ExpectedResults_keywordIndicator.csv")
########### derive expected output for block 3 operations ############
hourlyStats <- calcHourlyStats(rawData,hourIndices,keywordIndicator)
positiveColor <- rgb(0,0,1)
negativeColor <- rgb(1,0,0)
sentimentScores <- c(4,2,0) # 4 is positive, 2 is neutral, 0 is negative
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
block3Data <- data.frame(hourlyStats,colorGradient)
write.csv(block3Data, "block3ExpectedResults.csv")
summary(rawData)
rawData <- read.csv("TestData_OpenCL_SMA.csv")
head(rawData)
############ derive expected output for block 2 operations #############
hourIndices <- calcExpectedHourlyTweetIndices(rawData)
keywordIndicator <- calcExpectedKeywordIndices(rawData,c("snow", "park","I'm"))
keywordDataframe <- data.frame(Snow = keywordIndicator[,1], Park = keywordIndicator[,2], Im = keywordIndicator[,3])
write.csv(hourIndices,"block2ExpectedResults_HourIndices.csv")
write.csv(keywordDataframe, "block2ExpectedResults_keywordIndicator.csv")
########### derive expected output for block 3 operations ############
hourlyStats <- calcHourlyStats(rawData,hourIndices,keywordIndicator)
positiveColor <- rgb(0,0,1)
negativeColor <- rgb(1,0,0)
sentimentScores <- c(4,2,0) # 4 is positive, 2 is neutral, 0 is negative
colorGradient <- calcColorGradient(hourlyStats$meanSentiment,negativeColor,positiveColor,sentimentScores)
block3Data <- data.frame(hourlyStats,colorGradient)
write.csv(block3Data, "block3ExpectedResults.csv")
