net = network(AdjMatrix,matrix.type="adjacency",directed=FaLSE)
library(statnet)
net = network(AdjMatrix,matrix.type="adjacency",directed=FaLSE)
? network
library(network)
net = network(AdjMatrix,matrix.type="adjacency",directed=FaLSE)
net = network(AdjMatrix,matrix.type="adjacency",directed=False)
net = network(AdjMatrix,matrix.type="adjacency",directed=false)
net = network(AdjMatrix,matrix.type="adjacency",directed=F)
gplot(nrelations)
library(ggplot2)
gplot(nrelations)
ggplot(nrelations)
ggplot(net)
plot(network)
network
plot.igraph(net)
gplot(net)
quartz()
library(gplot)
library(sna)
gplot(net)
install.packages("statnet.common")
require(statnet.common)
library("statnet.common")
library(sna)
gplot(net)
gplot
ggplot(net)
library(ggplot2)
gplot
gplot(net)
ggplot(net)
library(statnet)
library(statnet.common)
install.packages("statnet.common")
lirary(statnet.common)
library(statnet.common)
library(sna)
library(statnet.common)
install.packages("statnet.common")
install.packages("C:/Users/User/Downloads/statnet.common_4.0.0.tar", repos = NULL)
install.packages("C:/Users/User/Downloads/statnet.common_4.0.0.tar.gz", repos = NULL, type = "source")
library(sna)
require(igraph)
install.packages("igraph")
require(igraph)
net=graph.adjacency(AdjMatrix,mode="undirected",weighted=NULL,diag=FALSE)
V(net)$name
gplot.igraph(g)
plot.igraph(g)
plot.igraph(net)
degree(net)
betweenness(net)
closeness(net)
diameter(net)
density(net)
density(net)
network.density(net)
net
edge_density(net)
V(net)$color = c(1,0,1,0,1)
plot.igraph(net)
V(net)$color=gsub(1,"red",V(net)$color)
V(net)$color = c(1,0,1,0,1)
plot.igraph(net)
V(net)$color=gsub('1',"red",V(net)$color)
plot.igraph(net)
V(net)$color=gsub('0',"blue",V(net)$color)
plot.igraph(net)
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$size = betweenness(net)
plot.igraph(net)
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$size = betweenness(net)*5
plot.igraph(net)
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$size = betweenness(net)*10
plot.igraph(net)
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$size = betweenness(net)*15
plot.igraph(net)
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$size = betweenness(net)*15
V(net)$name = c('a','b','c','d','e')
plot.igraph(net)
betweenness(net)
net$names
V(net)$names
net=graph.adjacency(AdjMatrix,mode="undirected",weighted=NULL,diag=FALSE)
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$names
V(net)
names(V(net))
names(V(net))[1]
V(net)
V(net)$names
V(net)$Agent1
names(V(net))
screenNames <- function(net) {
btwVals <- betweenness(net)net
nodeLabels <- rep('',length(btwVals))
for(index in 1:length(btwVals)) {
if(btwVals[index] < 1) {
nodeLabels[index] <- names(V(net))[index]
}
}
return(nodeLabels)
}
screenNames <- function(net) {
btwVals <- betweenness(net)net
nodeLabels <- rep('',length(btwVals))
for(index in 1:length(btwVals)) {
if(btwVals[index] < 1) {
nodeLabels[index] <- names(V(net))[index]
}
}
return(nodeLabels)
}
screenNames <- function(net) {
btwVals <- betweenness(net)net
nodeLabels <- rep('',length(btwVals))
for(index in 1:length(btwVals)) {
if(btwVals[index] < 1) {
nodeLabels[index] <- names(V(net))[index]
}
}
return(nodeLabels)
}
screenNames <- function(net) {
btwVals <- betweenness(net)
nodeLabels <- rep('',length(btwVals))
for(index in 1:length(btwVals)) {
if(btwVals[index] < 1) {
nodeLabels[index] <- names(V(net))[index]
}
}
return(nodeLabels)
}
screenNames(net)
btwVals <- betweenness(net)
nodeLabels <- rep('',length(btwVals))
for(index in 1:length(btwVals)) {
if(btwVals[index] > 1) {
nodeLabels[index] <- names(V(net))[index]
}
}
return(nodeLabels)
}
screenNames <- function(net) {
btwVals <- betweenness(net)
nodeLabels <- rep('',length(btwVals))
for(index in 1:length(btwVals)) {
if(btwVals[index] > 1) {
nodeLabels[index] <- names(V(net))[index]
}
}
return(nodeLabels)
}
screenNames(net)
# create graph object.  Hardcoded with homework data
createGraph <- function() {
# write data and create adjacency matrix
Agent1 <- c(0,1,1,0,1)
Agent2 <- c(1,0,0,1,1)
Agent3 <- c(1,0,0,1,0)
Agent4 <- c(0,1,1,0,0)
Agent5 <- c(1,1,0,0,0)
AdjMatrix <- as.matrix(data.frame(Agent1,Agent2,Agent3,Agent4,Agent5))
# create igraph object based on adjacency matrix
net=graph.adjacency(AdjMatrix,mode="undirected",weighted=NULL,diag=FALSE)
return(net)
}
# create graph object.  Hardcoded with homework data
createNetwork <- function() {
# write data and create adjacency matrix
Agent1 <- c(0,1,1,0,1)
Agent2 <- c(1,0,0,1,1)
Agent3 <- c(1,0,0,1,0)
Agent4 <- c(0,1,1,0,0)
Agent5 <- c(1,1,0,0,0)
AdjMatrix <- as.matrix(data.frame(Agent1,Agent2,Agent3,Agent4,Agent5))
# create igraph object based on adjacency matrix
net=graph.adjacency(AdjMatrix,mode="undirected",weighted=NULL,diag=FALSE)
return(net)
}
net <- createNetwork()
# calculate centrality measures
calcCentrality(net) {
# calculate centality measures to compare with hand calculated values
cat(degree(net))
cat("\n")
betweenness(net)
cat("\n")
closeness(net)
cat("\n")
diameter(net)
cat("\n")
edge_density(net)
cat("\n")
}
# calculate centrality measures
calcCentrality(net) {
# calculate centality measures to compare with hand calculated values
cat(degree(net)
cat("\n")
betweenness(net)
cat("\n")
closeness(net)
cat("\n")
diameter(net)
cat("\n")
edge_density(net)
cat("\n")
}
# calculate centrality measures
calcCentrality(net) {
# calculate centality measures to compare with hand calculated values
cat(degree(net))
cat("\n")
cat(betweenness(net))
cat("\n")
cat(closeness(net))
cat("\n")
cat(diameter(net))
cat("\n")
cat(edge_density(net))
cat("\n")
}
# calculate centrality measures
calcCentrality <-function(net) {
# calculate centality measures to compare with hand calculated values
cat(degree(net))
cat("\n")
cat(betweenness(net))
cat("\n")
cat(closeness(net))
cat("\n")
cat(diameter(net))
cat("\n")
cat(edge_density(net))
cat("\n")
}
calcCentrality(net)
# calculate centrality measures
calcCentrality <-function(net) {
# calculate centality measures to compare with hand calculated values
cat("degree: \n")
cat(degree(net))
cat("betweenness: \n")
cat(betweenness(net))
cat("closeness: \n")
cat(closeness(net))
cat("diameter: \n")
cat(diameter(net))
cat("edge density: \n")
cat(edge_density(net))
}
calcCentrality(net)
# calculate centrality measures
calcCentrality <-function(net) {
# calculate centality measures to compare with hand calculated values
cat("\n degree: \n")
cat(degree(net))
cat("\n betweenness: \n")
cat(betweenness(net))
cat("\n closeness: \n")
cat(closeness(net))
cat("\n diameter: \n")
cat(diameter(net))
cat("\n edge density: \n")
cat(edge_density(net))
}
calcCentrality(net)
# calculate centrality measures
calcCentrality <-function(net) {
# calculate centality measures to compare with hand calculated values
cat("\n degree: \t")
cat(degree(net))
cat("\n betweenness: \t")
cat(betweenness(net))
cat("\n closeness: \t")
cat(closeness(net))
cat("\n diameter: \t")
cat(diameter(net))
cat("\n edge density: \t")
cat(edge_density(net))
}
calcCentrality(net)
# visualize graph
plotGraph <- function(net) {
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$name = sreenNames(net)
V(net)$size = betweenness(net)*15
plot.igraph(net)
}
net <- createNetwork()
calcCentrality(net)
plotGraph(net)
screenNames <- function(net) {
btwVals <- betweenness(net)
nodeLabels <- rep('',length(btwVals))
for(index in 1:length(btwVals)) {
if(btwVals[index] > 1) {
nodeLabels[index] <- names(V(net))[index]
}
}
return(nodeLabels)
}
net <- createNetwork()
calcCentrality(net)
plotGraph(net)
# visualize graph
plotGraph <- function(net) {
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$name = screenNames(net)
V(net)$size = betweenness(net)*15
plot.igraph(net)
}
net <- createNetwork()
calcCentrality(net)
plotGraph(net)
plot.igraph(net,vertex.label.color = 'grey')
# visualize graph
plotGraph <- function(net) {
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$name = screenNames(net)
V(net)$size = betweenness(net)*15
plot.igraph(net,vertex.label.color = 'grey')
}
plotGraph(net)
# visualize graph
plotGraph <- function(net) {
V(net)$color = c(1,0,1,0,1)
V(net)$color=gsub('1',"red",V(net)$color)
V(net)$color=gsub('0',"blue",V(net)$color)
V(net)$name = screenNames(net)
V(net)$size = betweenness(net)*15
plot.igraph(net,vertex.label.color = 'black')
}
# main script #
net <- createNetwork()
calcCentrality(net)
plotGraph(net)
a = c(1,1,0,0,0)
b <- c(c(1,1,0,0,0),c(0,0,0,0,1))
b
b
a
b <- c(0,0,0,0,1)
c <- data.frame(a,b)
c
c*c
c*.*c
c*c
c%*%c
matrix(c(1,1,0,0,0,0,0,0,0,1),nrow = 5,ncol=2)
a <- matrix(c(1,1,0,0,0,0,0,0,0,1),nrow = 5,ncol=2)
a%*%a
a%*%t(a)
# from https://stackoverflow.com/questions/41820683/how-to-plot-ellipse-given-a-general-equation-in-r
plot.ellipse <- function (a, b, c, d, e, f, n.points = 1000) {
## solve for centre
A <- matrix(c(a, c / 2, c / 2, b), 2L)
B <- c(-d / 2, -e / 2)
mu <- solve(A, B)
## generate points on circle
r <- sqrt(a * mu[1] ^ 2 + b * mu[2] ^ 2 + c * mu[1] * mu[2] - f)
theta <- seq(0, 2 * pi, length = n.points)
v <- rbind(r * cos(theta), r * sin(theta))
## transform for points on ellipse
z <- backsolve(chol(A), v) + mu
## plot points
plot(t(z), type = "l")
}
plot.ellipse(4,4,4,0,0,0)
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
setwd("D:/VirturalRealityGreenspace/OpenCL_SMA/visualStudioProject")
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_10000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_10000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_10000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
(22.08+21.06 + 20.08)/3
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
tart.time <- Sys.time()
rawData <- read.csv("TestData_R_1000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_10000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_10000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_100000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
start.time <- Sys.time()
rawData <- read.csv("TestData_R_1000000.csv")
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken*1000
